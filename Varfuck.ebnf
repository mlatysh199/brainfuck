nzdigit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
digit ::= "0" | nzdigit;
nconst ::= "0"
    | nzdigit digit*;
constn ::= "0" | digit* nzdigit;
const ::= nconst ("." constn)?;
chars ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" | "_";
string ::= chars+;
const_op ::= "**" | "*" | "/" | "+" | "-" | "<<" | ">>" | "&" | "|" | "^" | "==" | "and" | "or" | "<" | ">" | "<=" | ">=";
u_const_op ::= "~" | "-" | "not";
const_expr_p ::= const_op const_expr | "";
const_expr ::= (const
    | string "(" const_expr ")"
    | "(" const_expr ")"
    | u_const_op const_expr
    | string) const_expr_p;
separator ::= ",";
breaker ::= ";"
    | "\n";
const_types ::= "num";
const_struct ::= "{" (const_expr (separator const_expr)*)? "}";
param_struct ::= "{" (const_expr string (separator const_expr string)*)? "}";
const_param_struct ::= "{" (const_types string (separator const_types string)*)? "}";
var_struct ::= "{" (string? (separator string?)*)? "}";
call ::= const_struct string var_struct var_struct ;
return ::= "fuck" var_struct?;
while_or_repeat ::= const_expr block;
ifel ::= (const_expr) block breaker* block;
const_def ::= const_types string "=" const_expr;
statement ::= (call | return | while_or_repeat | ifel | const_def);
block ::= "[" breaker* (statement breaker+)* "]";
macro_def ::= const_param_struct string const_struct param_struct block;
grammar ::= (const_def breaker+)* macro_def breaker+ ((macro_def | const_def) breaker+)* call breaker*;